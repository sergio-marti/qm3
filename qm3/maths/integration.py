# -*- coding: iso-8859-1 -*-
#
#    http://es.wikipedia.org/wiki/Método_de_Romberg
#    http://en.wikipedia.org/wiki/Simpson%27s_rule
#
import math



def Simpson( x, y ):
    n = len( x )
    o = 0.0
    for i in range( 0, n - 2, 2 ):
        j  = i + 1
        k  = i + 2
        d1 = x[j] - x[i]
        d2 = x[k] - x[j]
        d3 = d1 + d2
        o += ( ( d1 + d1 - d2 ) * y[i] + ( d3 * d3 * y[j] + d1 * ( d2 + d2 - d1 ) * y[k] ) / d2 ) * d3 / 6.0 / d1
    # fix odd intervals with a trapeizodal rule
    if( n%2 != 0 ):
        o += ( y[-1] + y[-2] ) * ( x[-1] - x[-2] ) * 0.5
    return( o )


def Simpson_f( f, a, b, eps = 1.0e-3, n = None ):
    def __integrate( f, a, b, n ):
        h = float( b - a ) / float( n )
        return( h / 3.0 * ( f(a) + 2 * sum( (k%2+1) * f( a + h * k ) for k in range( 1, n ) ) + f(b) ) )
    
    if( n != None ):
        if( n%2 != 0 ):
            n += 1
        return( __integrate( f, a, b, n ), n )
    else:
        l = 0.5 * ( b - a ) * ( f(a) + f(b) )
        n = 100
        while( True ):
            r = __integrate( f, a, b, n )
            if( abs( l - r ) < eps ):
                return( r, n, abs(l-r) )
            l = r
            n *= 10



# WARNING: method can fail if the area to integrate is in the order of the selected tolerance (eps)
# otherwise is the best method for integrating (use lagrange interpolation for discrete integration)
def Romberg( f, a, b, eps = 1.0e-10 ):
    R = [ [ 0.5 * ( b - a ) * ( f(a) + f(b) ) ] ]
    n = 1
    while True:
        h = float( b - a ) / math.pow( 2.0, float( n ) )
        R.append( ( n + 1 ) * [ None ] )
        R[n][0] = 0.5 * R[n-1][0] + h * sum( f( a + ( 2.0 * k - 1.0 ) * h ) for k in range( 1, int( round( math.pow( 2.0, float( n ) - 1.0 ), 0 ) ) + 1 ) )
        for m in range( 1, n + 1 ):
            R[n][m] = R[n][m-1] + ( R[n][m-1] - R[n-1][m-1] ) / ( math.pow( 4.0, float( m ) ) - 1.0 )
        if( abs( R[n][n-1] - R[n][n] ) < eps ):
            return( R[n][n], n, abs(R[n][n-1]-R[n][n]) )
        n += 1



gauss_legendre_xi = [ -0.999553822651630629880080499095, -0.997649864398237688899494208183, -0.994227540965688277892063503665,
        -0.989291302499755531026503167137, -0.982848572738629070418288027709, -0.974909140585727793385645230069,
        -0.965485089043799251452273155671, -0.954590766343634905493481517021, -0.9422427613098726747522660045,
        -0.928459877172445795953045959075, -0.913263102571757654164733656151, -0.896675579438770683194324071967,
        -0.878722567678213828703773343639, -0.859431406663111096977192123492, -0.838831473580255275616623043903,
        -0.816954138681463470371124994012, -0.793832717504605449948639311738, -0.769502420135041373865616068749,
        -0.744000297583597272316540527931, -0.717365185362099880254068258294, -0.689637644342027600771207612439,
        -0.660859898986119801735967122844, -0.631075773046871966247928387289, -0.600330622829751743154746299164,
        -0.568671268122709784725485786625, -0.536145920897131932019857253125, -0.502804111888784987593672750368,
        -0.468696615170544477036078364936, -0.433875370831756093062386700363, -0.398393405881969227024379642518,
        -0.362304753499487315619043286359, -0.325664370747701914619112943627, -0.288528054884511853109139301435,
        -0.250952358392272120493158816035, -0.212994502857666132572388538666, -0.174712291832646812559339048011,
        -0.136164022809143886559241078001, -0.0974083984415845990632784501049, -0.058504437152420668628993321883,
        -0.019511383256793997654351234107, 0.019511383256793997654351234107, 0.058504437152420668628993321883,
        0.0974083984415845990632784501049, 0.136164022809143886559241078001, 0.174712291832646812559339048011,
        0.212994502857666132572388538666, 0.250952358392272120493158816035, 0.288528054884511853109139301435,
        0.325664370747701914619112943627, 0.362304753499487315619043286359, 0.398393405881969227024379642518,
        0.433875370831756093062386700363, 0.468696615170544477036078364936, 0.502804111888784987593672750368,
        0.536145920897131932019857253125, 0.568671268122709784725485786625, 0.600330622829751743154746299164,
        0.631075773046871966247928387289, 0.660859898986119801735967122844, 0.689637644342027600771207612439,
        0.717365185362099880254068258294, 0.744000297583597272316540527931, 0.769502420135041373865616068749,
        0.793832717504605449948639311738, 0.816954138681463470371124994012, 0.838831473580255275616623043903,
        0.859431406663111096977192123492, 0.878722567678213828703773343639, 0.896675579438770683194324071967,
        0.913263102571757654164733656151, 0.928459877172445795953045959075, 0.9422427613098726747522660045,
        0.954590766343634905493481517021, 0.965485089043799251452273155671, 0.974909140585727793385645230069,
        0.982848572738629070418288027709, 0.989291302499755531026503167137, 0.994227540965688277892063503665,
        0.997649864398237688899494208183, 0.999553822651630629880080499095 ]


gauss_legendre_wi = [ 0.001144950003186941534544171941, 0.0026635335895126816692935358317, 0.0041803131246948952367393042017,
        0.00569092245140319864926910711716, 0.007192904768117312752675570868, 0.008683945269260858426409452204,
        0.010161766041103064520831850352, 0.0116241141207978269164667699954, 0.013068761592401339293786825897,
        0.0144935080405090761169620745835, 0.015896183583725688044902909229, 0.017274652056269306358584207131,
        0.018626814208299031428735414152, 0.019950610878141998928891928715, 0.021244026115782006388710737251,
        0.022505090246332461926221589686, 0.0237318828659301012931925246136, 0.024922535764115491105117847003,
        0.0260752357675651179029687436003, 0.0271882275004863806744187066805, 0.028259816057276862396753197965,
        0.02928836958326784769276758602, 0.0302723217595579806612200100909, 0.0312101741881147016424428667206,
        0.032100498673487773148056490287, 0.032941939397645401382836180902, 0.0337332149846115228166751630642,
        0.034473120451753928794364226731, 0.0351605290447475934955265923887, 0.035794393953416054602861588816,
        0.0363737499058359780439649910465, 0.036897714638276008839150996573, 0.037365490238730490026705377058,
        0.0377763643620013974897749764263, 0.038129711314477638344206791566, 0.038424993006959423185212436329,
        0.038661759774076463327077110267, 0.0388396510590519689317741826688, 0.0389583959627695311986255247723,
        0.039017813656306654811280439253, 0.039017813656306654811280439253, 0.0389583959627695311986255247723,
        0.0388396510590519689317741826688, 0.038661759774076463327077110267, 0.038424993006959423185212436329,
        0.038129711314477638344206791566, 0.0377763643620013974897749764263, 0.037365490238730490026705377058,
        0.036897714638276008839150996573, 0.0363737499058359780439649910465, 0.035794393953416054602861588816,
        0.0351605290447475934955265923887, 0.034473120451753928794364226731, 0.0337332149846115228166751630642,
        0.032941939397645401382836180902, 0.032100498673487773148056490287, 0.0312101741881147016424428667206,
        0.0302723217595579806612200100909, 0.02928836958326784769276758602, 0.028259816057276862396753197965,
        0.0271882275004863806744187066805, 0.0260752357675651179029687436003, 0.024922535764115491105117847003,
        0.0237318828659301012931925246136, 0.022505090246332461926221589686, 0.021244026115782006388710737251,
        0.019950610878141998928891928715, 0.018626814208299031428735414152, 0.017274652056269306358584207131,
        0.015896183583725688044902909229, 0.0144935080405090761169620745835, 0.013068761592401339293786825897,
        0.0116241141207978269164667699954, 0.010161766041103064520831850352, 0.008683945269260858426409452204,
        0.007192904768117312752675570868, 0.00569092245140319864926910711716, 0.0041803131246948952367393042017,
        0.0026635335895126816692935358317, 0.001144950003186941534544171941 ]


# Legendre-Gauss Quadrature:
# int_a^b{ f(x) dx } = {b - a} over {2} sum_{ -1 }^{ {}+1 }{ w_i · f left( {{b - a} over 2 } · x_i + {{b +a} over 2} right) }
#
def Gauss( f, a, b, _xi = gauss_legendre_xi, _wi = gauss_legendre_wi ):
    o = 0.0
    tm = ( b - a ) * 0.5
    tp = ( b + a ) * 0.5
    for i in range( len( _xi ) ):
        o += _wi[i] * f( tm * _xi[i] + tp )
    return( tm * o )



