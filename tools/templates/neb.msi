#!/usr/bin/env python3
import  sys
import  math
import  qm3.problem
import  qm3.utils.msi


class parall_neb( qm3.problem.template ):
    def __init__( self, problem, sele, kumb, comm, ncpu, guess ):
        qm3.problem.template.__init__( self )

        self.comm = comm
        self.node = len( guess ) - 2
        self.ncpu = ncpu
        self.chnk = self.node // ncpu

        self.kumb = kumb
        self.sele = sele[:]
        self.crd0 = guess[ 0][:]
        self.crdf = guess[-1][:]
        self.prob = problem

        self.dime = len( self.crd0 )
        self.size = self.dime * self.node
        self.coor = []
        for k in range( 1, self.node + 1 ):
            self.coor += guess[k][:]
        self.func = 0
        self.grad = []

        self.prob.coor = self.crd0[:]
        self.prob.get_func()
        self.pot0 = self.prob.func
        self.prob.coor = self.crdf[:]
        self.prob.get_func()
        self.potf = self.prob.func
        if( self.comm.node == 0 ):
            print( self.pot0, self.potf )


    def get_grad( self ):
        # ----------------------------------------------------------------------
        def __calc_tau( potm, poti, potp, crdm, crdi, crdp ):
            dcM = [ ii-jj for ii,jj in zip( crdp, crdi ) ]
            dcm = [ ii-jj for ii,jj in zip( crdi, crdm ) ]
            dpM = max( math.fabs( potp - poti ), math.fabs( potm - poti ) )
            dpm = min( math.fabs( potp - poti ), math.fabs( potm - poti ) )
            if( potp > poti and poti > potm ):
                tau = dcM[:]
            elif( potp < poti and poti < potm ):
                tau = dcm[:]
            else:
                if( potp > potm ):
                    tau = [ dpM * ii + dpm * jj for ii,jj in zip( dcM, dcm ) ]
                else:
                    tau = [ dpm * ii + dpM * jj for ii,jj in zip( dcM, dcm ) ]
            tmp = math.sqrt( sum( [ ii * ii for ii in tau ] ) )
            tau = [ ii / tmp for ii in tau ]
            gum = [ self.kumb * ( ii - jj ) for ii,jj in zip( dcm, dcM ) ]
            tmp = sum( [ ii * jj for ii,jj in zip( gum, tau ) ] )
            gum = [ tmp * ii for ii in tau ]
            return( tau, gum )
        # ----------------------------------------------------------------------
        vpot = []
        gpot = []
        # get potential energy and gradients from the chain elements
        for who in range( self.comm.node * self.chnk, ( self.comm.node + 1 ) * self.chnk ):
            self.prob.coor = self.coor[self.dime*who:self.dime*who+self.dime][:]
            self.prob.get_grad()
            vpot.append( self.prob.func )
            gpot += self.prob.grad[:]
            try:
                self.prob.neb_data( who )
            except:
                pass
        # sync vpot from and to nodes
        self.comm.barrier()
        if( self.comm.node == 0 ):
            for i in range( 1, self.ncpu ):
                vpot += self.comm.recv( i, self.chnk )
            for i in range( 1, self.ncpu ):
                self.comm.send( i, vpot )
        else:
            self.comm.send( 0, vpot )
            vpot = self.comm.recv( 0, self.node )
        # sync gpot from and to nodes
        self.comm.barrier()
        if( self.comm.node == 0 ):
            for i in range( 1, self.ncpu ):
                gpot += self.comm.recv( i, self.dime * self.chnk )
            for i in range( 1, self.ncpu ):
                self.comm.send( i, gpot )
        else:
            self.comm.send( 0, gpot )
            gpot = self.comm.recv( 0, self.size )
        self.func = sum( vpot )
        self.grad = []
        # calculate neb components    
        for who in range( self.node ):
            if( who == 0 ):
                # first node
                tau, gum = __calc_tau( self.pot0, vpot[who], vpot[who+1],
                            self.crd0,
                            self.coor[self.dime*who:self.dime*who+self.dime],
                            self.coor[self.dime*(who+1):self.dime*(who+1)+self.dime] )
            elif( who == self.node - 1 ):
                # last node
                tau, gum = __calc_tau( vpot[who-1], vpot[who], self.potf,
                            self.coor[self.dime*(who-1):self.dime*(who-1)+self.dime],
                            self.coor[self.dime*who:self.dime*who+self.dime],
                            self.crdf )
            else:
                # intermediates
                tau, gum = __calc_tau( vpot[who-1], vpot[who], vpot[who+1],
                            self.coor[self.dime*(who-1):self.dime*(who-1)+self.dime],
                            self.coor[self.dime*who:self.dime*who+self.dime],
                            self.coor[self.dime*(who+1):self.dime*(who+1)+self.dime] )
            # common to all nodes
            gsp = sum( [ ii * jj for ii,jj in zip( tau, gpot[self.dime*who:self.dime*who+self.dime] ) ] )
            grd = [ ii - gsp * jj + kk for ii,jj,kk in zip( gpot[self.dime*who:self.dime*who+self.dime], tau, gum ) ]
            qm3.utils.project_RT_modes( self.prob.mass, self.coor[self.dime*who:self.dime*who+self.dime], grd, [] )
            self.grad += grd[:]
    





cpu = 60
com = qm3.utils.msi.client( int( sys.argv[1] ), inet = ( "r1n06", 6969 ) )

obj = parall_neb( oQM, sel, 100., com, cpu, guess )
qm3.actions.minimize.fire( obj, step_number = 100, gradient_tolerance = 0.1 * cpu,
    step_size = 0.1, print_frequency = 1, fire2 = True )

com.barrier()
