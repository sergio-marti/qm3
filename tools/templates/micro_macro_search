#!/usr/bin/env python
# -*- coding: iso-8859-1 -*-

from __future__ import print_function, division
import  sys
if( sys.version_info[0] == 2 ):
    range = xrange
import  os

os.environ["AMBERHOME"] = "/Users/smarti/Devel/amber/18"
os.environ["QM3_LIBSQM"] = "/Users/smarti/Devel/amber/18/qm3/libsqm.so"

import  qm3.mol
import  qm3.engines.namd
import  qm3.engines.sqm
import  qm3.engines._mmint
import  qm3.fio.dcd
import  qm3.actions.minimize
import  qm3.problem
import  pickle
import  time


class envi_problem( qm3.problem.template ):

    def __init__( self, molec, sele ):
        qm3.problem.template.__init__( self )

        self.mol = molec
        os.system( "bash r.namd &" )
        while( not os.path.isfile( "namd.shmid" ) ):
            time.sleep( 1 )
        time.sleep( 2 )
        self.emm = qm3.engines.namd.namd_shm()

        self.sel = sele
        self.coor = sum( [ self.mol.coor[3*i:3*i+3] for i in self.sel ], [] )
        self.size = len( self.coor )
        self.grad = []
        self.hess = []

        self.fd = open( "envi.log", "wt" )


    def log( self, txt ):
        self.fd.write( txt + "\n" )
        self.fd.flush()


    def update_coor( self ):
        for i in range( len( self.sel ) ):
            for j in [0, 1, 2]:
                self.mol.coor[3*self.sel[i]+j] = self.coor[3*i+j]


    def copy_coor( self, mol ):
        for i in range( len( self.sel ) ):
            i3 = i * 3
            I3 = self.sel[i] * 3
            for j in [0, 1, 2]:
                self.coor[i3+j] = mol.coor[I3+j]
        self.update_coor()
        self.emm.update_coor( self.mol )


    def paste_coor( self, mol ):
        for i in range( len( self.sel ) ):
            i3 = i * 3
            I3 = self.sel[i] * 3
            for j in [0, 1, 2]:
                mol.coor[I3+j] = self.coor[i3+j]


    def get_func( self ):
        self.update_coor()
        self.mol.func = .0
        self.emm.get_func( self.mol )
        self.func = self.mol.func


    def get_grad( self ):
        self.update_coor()
        self.mol.func = .0
        self.mol.grad = [ .0 for i in range( 3 * self.mol.natm ) ]
        self.emm.get_grad( self.mol )
        self.func = self.mol.func
        self.grad = sum( [ self.mol.grad[3*i:3*i+3] for i in self.sel ], [] )




class core_problem( qm3.problem.template ):
    def __init__( self ):
        qm3.problem.template.__init__( self )

        self.mol = qm3.mol.molecule( "pdb" )
        self.mol.boxl = [ 80.30, 69.03, 75.00 ]
        self.mol.psf_read( "psf" )
        self.mol.nbnd_read( "non_bonded" )

        f = open( "sele_QM.pk", "rb" )
        self.sel = pickle.load( f )
        f.close()
        f = open( "sele_LA.pk", "rb" )
        sla = pickle.load( f )
        f.close()
        f = open( "sele_MM.pk", "rb" )
        smm = pickle.load( f )
        f.close()

        self.eqm = qm3.engines.sqm.dl_sqm( self.mol, """
qm_theory = "AM1",
qmcharge = +2,
""", self.sel, smm, sla )

        f = open( "sele_EX.pk", "rb" )
        exc = pickle.load( f )
        f.close()
        
        self.fix = qm3.engines._mmint.QMLJ( self.mol, self.sel, smm, exc )

        self.size = 3 * len( self.sel )
        self.coor = []
        self.mass = []
        for i in self.sel:
            self.coor += self.mol.coor[3*i:3*i+3]
            self.mass.append( self.mol.mass[i] )
        self.func = 0
        self.grad = []

        self.envi = envi_problem( self.mol, smm )
        self.envi_min = True

        self.dcd = qm3.fio.dcd.dcd()
        self.dcd.write( "dcd", self.mol.natm, self.sel )

        self.cnt = 0


    def current_step( self, istep ):
        self.mol.dcd_write( self.dcd )


    def update_coor( self ):
        for i in range( len( self.sel ) ):
            i3 = self.sel[i] * 3
            j3 = i * 3
            self.mol.coor[i3:i3+3] = self.coor[j3:j3+3]
        # --------------------------------------------------------
        if( self.envi_min ):
            self.envi.log( str( self.mol.chrg[0:54] ) )
            self.envi.emm.update_chrg( self.mol )
#            self.envi.copy_coor( self.mol )
            qm3.actions.minimize.fire( self.envi, print_frequency = 10, step_number = 1000,
                gradient_tolerance = 1.5, step_size = 0.1, fire2 = True, log_function = self.envi.log )
#            self.envi.paste_coor( self.mol )
        # --------------------------------------------------------


    def get_func( self ):
        self.update_coor()
        self.mol.func = 0
        self.eqm.get_func( self.mol )
        self.fix.get_func( self.mol )
        self.func = self.mol.func


    def get_grad( self ):
        self.update_coor()
        self.mol.func = 0
        self.mol.grad = [ 0 for i in range( 3 * self.mol.natm ) ]
        self.eqm.get_grad( self.mol )
        self.fix.get_func( self.mol )
        self.fix.get_grad( self.mol )
        self.func = self.mol.func
        self.grad = sum( [ self.mol.grad[3*i:3*i+3] for i in self.sel ], [] )


    def get_hess( self ):
        # ---------------------------------------------
        if( not os.path.isfile( "update.dump" ) or self.cnt % 10 == 0 ):
            self.update_coor()
            self.envi_min = False
            self.num_hess( central = True )
            self.envi_min = True
            qm3.utils.manage_hessian( self.coor, self.grad, self.hess, should_update = False )
            os.system( "cp update.dump update.%05d"%( self.cnt ) )
        else:
            self.get_grad()
            self.hess = [ .0 for i in range( self.size * self.size ) ]
            qm3.utils.manage_hessian( self.coor, self.grad, self.hess, should_update = True )
        self.cnt += 1
        # ---------------------------------------------
        qm3.utils.raise_hessian_RT( self.mass, self.coor, self.hess )




obj = core_problem()

# -- provide initial charges --
obj.get_func()
obj.envi.emm.update_chrg( obj.mol )
# -----------------------------

qm3.actions.minimize.baker( obj, step_number = 100, step_size = 0.1, print_frequency = 1, gradient_tolerance = 2.0, follow_mode = 0 )
obj.mol.pdb_write( "last.pdb" )
obj.dcd.close()
obj.envi.fd.close()

val, vec = qm3.utils.hessian_frequencies( obj.mass, obj.coor, obj.hess )
print( val )
for i in range( min( 10, obj.size ) ):
    if( val[i] < .0 ):
        qm3.utils.normal_mode_view( obj.coor, val, vec, obj.eqm.smb, i, afac = 4 )
    else:
        qm3.utils.normal_mode_view( obj.coor, val, vec, obj.eqm.smb, i )

obj.envi.emm.stop()
