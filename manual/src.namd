\normalsize
\subsection[namd]{namd.py}
This module allows to use NAMD\footnote{http://www.ks.uiuc.edu/Development/Download/download.cgi?PackageName=NAMD} 
as a MM engine, as well as provides functions for working with NAMD files.
Functions \func{coordinate\_*} provide binary IO for NAMD, while \func{pdb\_write} allows to export the molecule in PDB format, but allowing to set the occupancy column depending on whether the index atom is included (1) or not (0) in the \parm{fixed} list.\\
Three classes are available: 1) \func{run\_single} for single calculation (*very* inefficient, since the model is allocated each time), 2) \func{run\_pipe} a piped version
(needs some patching) which performs IO on disk, and 3) \func{run\_shmem} which makes ose of SHM for the communication (the most efficient one). Peek a look to "i.namd\_pipe" and "i.namd\_shm" in the tools/templates forlder for examples of NAMD inputs.
\begin{pyglist}[language=python,fvset={frame=single}]
def coordinates_read( mol, fname )
def coordinates_write( mol, fname )
def pdb_write( mol, fname = None, fixed = [] )

class run_single( cpu = multiprocessing.cpu_count() )
    def update_chrg( mol )
    def update_coor( mol )
    def get_func( mol )
    def get_grad( mol )

class run_pipe
    def stop()
    def update_chrg( mol )
    def update_coor( mol )
    def get_func( mol )
    def get_grad( mol )

class run_shmem
    def stop()
    def update_chrg( mol )
    def update_coor( mol )
    def get_func( mol )
    def get_grad( mol )
\end{pyglist}
\func{namd\_pipe} uses an inhouse \textbf{patched} TCL-able version of namd2 which hangs on a pipe (thus avoiding an initialization for each run).

\footnotesize
\begin{pyglist}[language=python,fvset={frame=single}]
#SOURCE@../samples/test.namd
\end{pyglist}
\begin{pyglist}[fvset={frame=single}]
#SOURCE@../samples/logs/test.namd.log
\end{pyglist}
