\normalsize
\subsection[dynamo]{dynamo.py}
This module allows to use fDynamo\footnote{https://sites.google.com/site/pdynamomodeling/fdynamo-2.2.tgz?attredirects=0}
 as a MM engine (or semi-empirical QM/MM), as well as provides functions for working with fDynamo files.
The \func{dynamo} class makes use of a compiled binary (see frame examples), which hangs on a pipe for exchanging
data. 
The function \func{coordinates\_read} returns a molecule from a CRD file (\func{coordinates\_write} stores de molecule with this format).
\func{sequence} allows to generate sequences from a molecule, \func{selection}
builds fortran subroutines for atom selections, and \func{topology\_read} allows to extract information from binary "sys\_bin" model files (mass,
chrg, epsi and rmin).\\
fDynamo dependencies can be compiled as a binray library ("dynamo.so"), and accessed on runtime (via dlopen mechanism) to improve performance.
\begin{pyglist}[language=python,fvset={frame=single}]
def coordinates_read( fname = None )
def coordinates_write( mol, fname = None )
def sequence( mol, fname = None )
def selection( mol, sele, fname = None )

class dynamo_pipe()
    def stop()
    def update_chrg( mol )
    def update_coor( mol )
    def get_func( mol )
    def get_grad( mol )

class py_dynamo( "./dynamo.so" )
    def update_chrg( mol )
    def update_coor( mol )
    def get_func( mol )
    def get_grad( mol )
\end{pyglist}

\footnotesize
\begin{pyglist}[language=python,fvset={frame=single}]
#SOURCE@../samples/test.dynamo
\end{pyglist}
\begin{pyglist}[fvset={frame=single}]
#SOURCE@../samples/logs/test.dynamo.log
\end{pyglist}
Pipe based fDynamo dependencies:
\begin{pyglist}[language=fortran,fvset={frame=single}]
#SOURCE@../samples/test.dynamo.f90
\end{pyglist}
DLOPEN based fDynamo dependencies:
\begin{pyglist}[language=fortran,fvset={frame=single}]
#SOURCE@../qm3/engines/dynamo.f90
\end{pyglist}
