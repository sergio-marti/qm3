\normalsize
\subsection[grids]{grids.py}
This module provides basic workout for grids, through the class \func{grid} and its methods.

\begin{pyglist}[language=python,fvset={frame=single}]

class grid( fname = None, interpolant = qm3.maths.interpolation.cubic_spline )
    def calc( rx, ry )

    # returns Z into: fixed_X, changing_Y
    def parse( fname = None, sele = "0:1:2" )

    # Transforms Z into: changing_X, fixed_Y
    def rotate()

    def regular( fname, points = ( 10, 10 ), gauss = ( 0.1, 0.1 ), sele = "0:1:2" )

    def save( fname = None )

    def plot2d()

    def plot3d()
\end{pyglist}

The \func{parse} method expects the data to be arranged by blocks of at least 3 columns (which ones can be selected using the \parm{sele} parameter), and 
whatever the initial ordering, it \textbf{always} returns data \textbf{sorted} and
with the format \textbf{fixed\_X}, \textbf{changing\_Y}.
On the other hand, the data must be initially \textbf{regular}:

\begin{pyglist}[fvset={frame=single}]
         -9.201972         -9.991975        159.386562
         -9.201972         -9.302607        158.802396
         -9.201972         -8.613239        154.322866
         -9.201972         -7.923871        141.880976
         -9.201972         -7.234503        131.039535
[...]
          8.917474          7.242224        124.829570
          8.917474          7.931592        137.452974
          8.917474          8.620960        145.303749
          8.917474          9.310328        150.991309
          8.917474          9.999696        156.757517
\end{pyglist}

If it is not the case (the grid is not regular), this can be fixed using the \func{regular} method,
which includes a gaussian smoothing of the points, once the X and Y intervals have beed determined
(by parsing the data and obtaining $d\xi = \frac{max_\xi - min_\xi}{points_\xi}$). The gaussian smoothing
can be accelerated if the corresponind binary module is available (\_grids.so).

The methods \func{plotxd} are only available whenever \textbf{matplotlib.pyplot}, \textbf{mplot3d} and \textbf{numpy} modules
are already available on the system (set the environment variable \textbf{QM3\_MPLOT3D} properly).

The \func{calc} method provides an interpolated estimation of a (x,y) pair on the surface. The default interpolant
(cubic\_spline) can be changed during the creation of the grid object.

\footnotesize
\begin{pyglist}[language=python,fvset={frame=single}]
#SOURCE@../samples/test.grids
\end{pyglist}

\begin{center}
\includegraphics[width=.5\textwidth]{10.png}
\end{center}
